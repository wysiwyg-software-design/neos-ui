include: resource://Neos.Fusion/Private/Fusion/Root.fusion
include: resource://Neos.Neos/Private/Fusion/Prototypes/NodeUri.fusion
include: resource://Neos.Neos.Ui/Private/Fusion/Prototypes/RenderConfiguration.fusion
include: resource://Neos.Neos.Ui/Private/Fusion/Prototypes/ArrayCollection.fusion
include: resource://Neos.Neos.Ui/Private/Fusion/Prototypes/AppendAllToCollection.fusion

backend = Neos.Fusion:Template {
    templatePath = 'resource://Neos.Neos.Ui/Private/Templates/Backend/Index.html'

    headScripts = ${headScripts}
    headStylesheets = ${headStylesheets}
    splashScreenPartial = ${splashScreenPartial}

    configuration = Neos.Fusion:RawArray {
        nodeTree = ${Configuration.setting('Neos.Neos.userInterface.navigateComponent.nodeTree')}
        structureTree = ${Configuration.setting('Neos.Neos.userInterface.navigateComponent.structureTree')}
        allowedTargetWorkspaces = ${Neos.Ui.Workspace.getAllowedTargetWorkspaces()}
        endpoints = Neos.Fusion:RawArray {
            nodeTypeSchema = Neos.Fusion:UriBuilder {
                package = 'Neos.Neos'
                controller = 'Backend\\Schema'
                action = 'nodeTypeSchema'
                absolute = true
                arguments = Neos.Fusion:RawArray {
                    # TODO: dirty hack to not have to re-implement neos:backend.configurationCacheVersion VH
                    version = Neos.Fusion:Template {
                        templatePath = 'resource://Neos.Neos.Ui/Private/Templates/Backend/ConfigurationVersion.html'
                        @process.trim = ${String.trim(value)}
                    }
                }
            }
            translations = Neos.Fusion:UriBuilder {
                package = 'Neos.Neos'
                controller = 'Backend\\Backend'
                action = 'xliffAsJson'
                absolute = true
                arguments = Neos.Fusion:RawArray {
                    locale = ${interfaceLanguage}

                    # TODO: dirty hack to not have to re-implement neos:backend.configurationCacheVersion VH
                    version = Neos.Fusion:Template {
                        templatePath = 'resource://Neos.Neos.Ui/Private/Templates/Backend/ConfigurationVersion.html'
                        @process.trim = ${String.trim(value)}
                    }
                }
            }
        }
        @process.json = ${Json.stringify(value)}
    }

    routes = Neos.Fusion:RawArray {
        prototype(Neos.Fusion:UriBuilder) {
            absolute = true
        }

        ui = Neos.Fusion:RawArray {
            service = Neos.Fusion:RawArray {
                prototype(Neos.Fusion:UriBuilder) {
                    package = 'Neos.Neos.Ui'
                    controller = 'BackendService'
                }

                change = Neos.Fusion:UriBuilder {
                    action = 'change'
                }
                publish = Neos.Fusion:UriBuilder {
                    action = 'publish'
                }
                discard = Neos.Fusion:UriBuilder {
                    action = 'discard'
                }
                changeBaseWorkspace = Neos.Fusion:UriBuilder {
                    action = 'changeBaseWorkspace'
                }
                copyNode = Neos.Fusion:UriBuilder {
                    action = 'copyNode'
                }
                cutNode = Neos.Fusion:UriBuilder {
                    action = 'cutNode'
                }
                clearClipboard = Neos.Fusion:UriBuilder {
                    action = 'clearClipboard'
                }
                loadTree = Neos.Fusion:UriBuilder {
                    action = 'loadTree'
                }
                flowQuery = Neos.Fusion:UriBuilder {
                    action = 'flowQuery'
                }
                getWorkspaceInfo = Neos.Fusion:UriBuilder {
                    action = 'getWorkspaceInfo'
                }
                getPolicyInfo = Neos.Fusion:UriBuilder {
                    action = 'getPolicyInformation'
                }
            }
        }
        core = Neos.Fusion:RawArray {
            prototype(Neos.Fusion:UriBuilder) {
                package = 'Neos.Neos'
            }

            content = Neos.Fusion:RawArray {
                prototype(Neos.Fusion:UriBuilder) {
                    controller = 'Backend\\Content'
                }

                imageWithMetadata = Neos.Fusion:UriBuilder {
                    action = 'imageWithMetaData'
                }
                createImageVariant = Neos.Fusion:UriBuilder {
                    action = 'createImageVariant'
                }
                loadMasterPlugins = Neos.Fusion:UriBuilder {
                    action = 'masterPlugins'
                }
                loadPluginViews = Neos.Fusion:UriBuilder {
                    action = 'pluginViews'
                }
                uploadAsset = Neos.Fusion:UriBuilder {
                    action = 'uploadAsset'
                }
            }
            service = Neos.Fusion:RawArray {
                assets = Neos.Fusion:UriBuilder {
                    controller = 'Service\\Assets'
                    action = 'index'
                }
                nodes = Neos.Fusion:UriBuilder {
                    controller = 'Service\\Nodes'
                    action = 'index'
                }
                userPreferences = Neos.Fusion:UriBuilder {
                    subpackage = 'Service'
                    controller = 'UserPreference'
                    action = 'index'
                    format = 'json'
                }
                dataSource = Neos.Fusion:UriBuilder {
                    subpackage = 'Service'
                    controller = 'DataSource'
                    action = 'index'
                    format = 'json'
                }
                contentDimensions = Neos.Fusion:UriBuilder {
                    package = 'Neos.Neos'
                    controller = 'Service\\ContentDimensions'
                    action = 'index'
                }
            }
            modules = Neos.Fusion:RawArray {
                prototype(Neos.Fusion:UriBuilder) {
                    controller = 'Backend\\Module'
                }
                workspaces = Neos.Fusion:UriBuilder {
                    action = 'index'
                    arguments {
                        module = 'management/workspaces'
                    }
                }
                userSettings = Neos.Fusion:UriBuilder {
                    controller = 'Backend\\Module'
                    action = 'index'
                    arguments {
                        module = 'user/usersettings'
                    }
                }
                mediaBrowser = Neos.Fusion:UriBuilder {
                    controller = 'Backend\\Module'
                    action = 'index'
                    arguments {
                        module = 'media/browser'
                    }
                }
            }
            login = Neos.Fusion:UriBuilder {
                controller = 'Login'
                action = 'index'
                format = 'json'
            }
            logout = Neos.Fusion:UriBuilder {
                controller = 'Login'
                action = 'logout'
            }
        }
        @process.json = ${Json.stringify(value)}
    }

    frontendConfiguration = Neos.Neos.Ui:RenderConfiguration {
        path = 'frontendConfiguration'
        @process.json = ${Json.stringify(value)}
    }

    nodeTypes = Neos.Fusion:RawArray {
        roles = ${Configuration.setting('Neos.Neos.Ui.nodeTypeRoles')}
        groups = ${Neos.Ui.PositionalArraySorter.sort(Configuration.setting('Neos.Neos.nodeTypes.groups'))}

        @process.json = ${Json.stringify(value)}
    }

    menu = Neos.Fusion:RawArray {
        content = Neos.Fusion:RawArray {
            label = 'Neos.Neos:Main:content'
            icon = 'file'
            uri = Neos.Neos:NodeUri {
                node = ${site}
            }
            target = 'ContentCanvas'

            children = Neos.Neos.Ui:ArrayCollection {
                collection = ${sitesForMenu}
                itemName = 'currentSiteInMenu'
                itemRenderer = Neos.Fusion:RawArray {
                    icon = 'globe'
                    label = ${currentSiteInMenu.name}
                    uri = ${currentSiteInMenu.uri}
                    target = 'Window'
                    isActive = ${currentSiteInMenu.active}
                    skipI18n = ${true}
                }
            }
        }

        @process.modules = Neos.Neos.Ui:AppendAllToCollection {
            appendTo = ${value}
            collection = ${Configuration.setting('Neos.Neos.modules')}
            itemName = 'module'
            itemKey = 'moduleName'

            itemKeyRenderer = ${moduleName}
            itemRenderer = Neos.Fusion:RawArray {
                label = ${module.label}
                icon = ${module.icon}
                uri = Neos.Fusion:UriBuilder {
                    package = 'Neos.Neos'
                    controller = 'Backend\\Module'
                    action = 'index'
                    absolute = true
                    arguments {
                        module = ${moduleName}
                    }
                }
                target = 'Window'

                children = Neos.Neos.Ui:ArrayCollection {
                    collection = ${module.submodules}
                    itemName = 'submodule'
                    itemKey = 'submoduleName'

                    itemRenderer = Neos.Fusion:RawArray {
                        icon = ${submodule.icon}
                        label = ${submodule.label}
                        uri = Neos.Fusion:UriBuilder {
                            package = 'Neos.Neos'
                            controller = 'Backend\\Module'
                            action = 'index'
                            absolute = true
                            arguments {
                                module = ${moduleName + '/' + submoduleName}
                            }
                        }
                        isActive = true
                        target = 'Window'

                        @if {
                            isNotHiddenInMenu = ${!submodule.hideInMenu}
                            isAvailable = ${Neos.Ui.Modules.isAvailable(moduleName + '/' + submoduleName)}
                        }
                    }
                }

                @if {
                    isNotHiddenInMenu = ${!module.hideInMenu}
                    isAvailable = ${Neos.Ui.Modules.isAvailable(moduleName)}
                }
            }
        }

        @process.json = ${Json.stringify(value)}
    }

    initialState = Neos.Neos.Ui:RenderConfiguration {
        path = 'initialState'
        context {
            documentNode = ${documentNode}
            site = ${site}
            user = ${user}
            clipboardNode = ${clipboardNode}
            clipboardMode = ${clipboardMode}
        }

        @process.json = ${Json.stringify(value)}
    }

    env = ${Configuration.setting('Neos.Flow.core.context')}
}
